# app.py

import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
from scoring_engine import calcular_indice_viabilidade, PESOS, JUSTIFICATIVAS_PESOS
from geolocation_service import find_all_nearest_pois, find_nearest_hub

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="AgroScore Validator 3.4", page_icon="üõ∞Ô∏è", layout="wide")

# --- T√≠tulo e Descri√ß√£o ---
st.title("üõ∞Ô∏è AgroScore Validator 3.4")
st.markdown("Plataforma com **mapa log√≠stico completo**, mostrando as rotas para Silos, Cidades e Rodovias.")

# --- Barra Lateral de Entradas (Inputs) ---
with st.sidebar:
    st.header("Dados de Entrada da Propriedade")

    nome_fazenda = st.text_input("Nome da Fazenda", "Fazenda Boa Esperan√ßa")
    latitude = st.number_input("Latitude da Sede", value=-16.6869, format="%.6f")
    longitude = st.number_input("Longitude da Sede", value=-49.2648, format="%.6f")

    # CORRE√á√ÉO APLICADA AQUI: a chave 'armazem' foi trocada para 'silo'
    if 'pois' not in st.session_state:
        st.session_state.pois = {
            'rodovia': {'nome': 'N√£o encontrada', 'distancia': 25.0, 'coords': None},
            'cidade': {'nome': 'N√£o encontrada', 'distancia': 60.0, 'coords': None},
            'silo': {'nome': 'N√£o encontrado', 'distancia': 60.0, 'coords': None}
        }
    if 'hub' not in st.session_state:
        st.session_state.hub = {'nome': 'N√£o encontrado', 'distancia': 100.0, 'coords': None}
    
    if st.button("Buscar Dados Geogr√°ficos", type="primary"):
        with st.spinner("Realizando busca geogr√°fica otimizada..."):
            all_pois_with_coords = find_all_nearest_pois(latitude, longitude, return_coords=True)
            if all_pois_with_coords:
                st.session_state.pois = all_pois_with_coords
            st.session_state.hub = find_nearest_hub(latitude, longitude)

    st.subheader("1. Log√≠stica (Peso: {}%)".format(int(PESOS['logistica']*100)))
    
    dist_asfalto_km = st.number_input(
        "Dist√¢ncia da Rodovia (km)", 
        min_value=0.0,
        value=float(st.session_state.get('pois', {}).get('rodovia', {}).get('distancia', 25.0))
    )
    dist_silo_km = st.number_input(
        "Dist√¢ncia do Armaz√©m Graneleiro (km)",
        min_value=0.0, 
        value=float(st.session_state.get('pois', {}).get('silo', {}).get('distancia', 60.0))
    )

    # O restante dos inputs continua igual
    st.subheader("2. Legal e Ambiental (Peso: {}%)".format(int(PESOS['legal_ambiental']*100)))
    situacao_reserva_legal = st.selectbox("Situa√ß√£o da Reserva Legal (CAR)", ['Averbada e regular', 'Averbada, mas precisa de averigua√ß√£o', 'Pendente com passivo'])
    possui_geo_sigef = st.checkbox("Possui Georreferenciamento (SIGEF)?", value=True)
    st.subheader("3. Recursos H√≠dricos (Peso: {}%)".format(int(PESOS['recursos_hidricos']*100)))
    indice_pluviometrico_mm = st.slider("√çndice Pluviom√©trico M√©dio Anual (mm)", 600, 2500, 1500)
    presenca_rio_perene = st.checkbox("Possui Rio Perene na propriedade?", value=True)
    st.subheader("4. Agronomia (Peso: {}%)".format(int(PESOS['agronomia']*100)))
    ph_solo = st.slider("pH m√©dio do Solo", 3.0, 9.0, 5.8, 0.1)
    teor_argila_percent = st.slider("Teor de Argila do Solo (%)", 5, 70, 30)
    st.subheader("5. Topografia (Peso: {}%)".format(int(PESOS['topografia']*100)))
    percentual_mecanizavel = st.slider("√Årea Mecaniz√°vel da Fazenda (%)", 0, 100, 85)

    analisar = st.button("Analisar Viabilidade")

# --- Painel Principal de Resultados ---
if analisar:
    dados_fazenda = {
        'dist_asfalto_km': dist_asfalto_km, 'dist_silo_km': dist_silo_km,
        'situacao_reserva_legal': situacao_reserva_legal, 'possui_geo_sigef': possui_geo_sigef,
        'indice_pluviometrico_mm': indice_pluviometrico_mm, 'presenca_rio_perene': presenca_rio_perene,
        'ph_solo': ph_solo, 'teor_argila_percent': teor_argila_percent,
        'percentual_mecanizavel': percentual_mecanizavel
    }
    indice_final, scores_detalhados, classe, desc_classe = calcular_indice_viabilidade(dados_fazenda)
    st.header(f"Resultados da An√°lise: {nome_fazenda}")
    tab1, tab2, tab3 = st.tabs(["üìä Resumo Geral", "üó∫Ô∏è Detalhes Geogr√°ficos", "‚öñÔ∏è Justificativa dos Pesos"])

    with tab1:
        st.subheader("Compilado da Avalia√ß√£o")
        col1, col2 = st.columns(2)
        with col1:
            st.metric(label="√çndice de Viabilidade Final", value=f"{indice_final:.2f} / 10")
        with col2:
            st.subheader(f"Classifica√ß√£o do Ativo: {classe}")
            st.info(desc_classe)
        st.divider()
        st.subheader("Pontua√ß√µes por Categoria")
        for categoria, score in scores_detalhados.items():
            st.markdown(f"**{categoria.replace('_', ' ').title()}**")
            st.progress(int(score * 10))
            
    with tab2:
        st.subheader("An√°lise Geogr√°fica e Log√≠stica")
        
        m = folium.Map(location=[latitude, longitude], zoom_start=9)
        folium.Marker(
            [latitude, longitude], 
            popup=f"üìç **{nome_fazenda}**", 
            tooltip="Local da Fazenda",
            icon=folium.Icon(color='blue', icon='home', prefix='fa')
        ).add_to(m)

        farm_coords = (latitude, longitude)

        if 'pois' in st.session_state:
            pois = st.session_state.pois
            
            # Linha para Silo/Graneleiro (Amarelo)
            if pois['silo']['coords']:
                silo_coords = pois['silo']['coords']
                folium.Marker(
                    silo_coords, 
                    popup=f"üì¶ **Armaz√©m/Silo**: {pois['silo']['nome']} ({pois['silo']['distancia']:.1f} km)",
                    tooltip="Armaz√©m/Silo Mais Pr√≥ximo",
                    icon=folium.Icon(color='orange', icon='industry', prefix='fa')
                ).add_to(m)
                folium.PolyLine(
                    locations=[farm_coords, silo_coords],
                    color='yellow', weight=3, opacity=0.8,
                    tooltip=f"Dist√¢ncia ao Armaz√©m: {pois['silo']['distancia']:.1f} km"
                ).add_to(m)

            # Rodovia (Laranja Escuro)
            if pois['rodovia']['coords']:
                rodovia_coords = pois['rodovia']['coords']
                folium.Marker(
                    rodovia_coords, 
                    popup=f"üõ£Ô∏è **Rodovia**: {pois['rodovia']['nome']} ({pois['rodovia']['distancia']:.1f} km)",
                    tooltip="Rodovia Mais Pr√≥xima",
                    icon=folium.Icon(color='red', icon='road', prefix='fa')
                ).add_to(m)
                folium.PolyLine(
                    locations=[farm_coords, rodovia_coords],
                    color='darkorange', weight=3, opacity=0.8,
                    tooltip=f"Dist√¢ncia √† Rodovia: {pois['rodovia']['distancia']:.1f} km"
                ).add_to(m)

            # Cidade (Neutro/Cinza)
            if pois['cidade']['coords']:
                cidade_coords = pois['cidade']['coords']
                folium.Marker(
                    cidade_coords, 
                    popup=f"üèôÔ∏è **Cidade**: {pois['cidade']['nome']} ({pois['cidade']['distancia']:.1f} km)",
                    tooltip="Cidade Mais Pr√≥xima",
                    icon=folium.Icon(color='lightgray', icon='building', prefix='fa')
                ).add_to(m)
                folium.PolyLine(
                    locations=[farm_coords, cidade_coords],
                    color='gray', weight=3, opacity=0.8,
                    tooltip=f"Dist√¢ncia √† Cidade: {pois['cidade']['distancia']:.1f} km"
                ).add_to(m)
        
        folium_static(m, width=700, height=500)

        st.markdown("#### Dist√¢ncias Calculadas:")
        if 'pois' in st.session_state:
            pois = st.session_state.pois
            st.success(f"üõ£Ô∏è **Rodovia mais pr√≥xima:** Aprox. **{pois['rodovia']['distancia']:.1f} km**")
            st.success(f"üèôÔ∏è **Cidade/Vila mais pr√≥xima:** {pois['cidade']['nome']} (aprox. **{pois['cidade']['distancia']:.1f} km**)")
            st.success(f"üì¶ **Armaz√©m/Silo mais pr√≥ximo:** {pois['silo']['nome']} (aprox. **{pois['silo']['distancia']:.1f} km**)")
        if 'hub' in st.session_state:
            st.success(f"üè≠ **Polo de Agroneg√≥cio mais pr√≥ximo:** {st.session_state.hub['nome']} (aprox. **{st.session_state.hub['distancia']:.1f} km**)")
    
    with tab3:
        st.subheader("Argumenta√ß√£o Sobre os Pesos da An√°lise")
        st.info("A metodologia de pesos reflete a realidade do investimento em ativos rurais...")
        for categoria, just in JUSTIFICATIVAS_PESOS.items():
            with st.expander(f"**{categoria.replace('_', ' ').title()} (Peso: {int(PESOS[categoria]*100)}%)**"):
                st.markdown(just)
else:
    st.info("Insira as coordenadas da fazenda e clique em 'Buscar Dados Geogr√°ficos' na barra lateral para come√ßar.")
